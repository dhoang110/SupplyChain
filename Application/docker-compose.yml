version: '4.22.1'
services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        echo "Waiting for Elasticsearch availability";
        until curl -s http://es01:9200 | grep -q "You Know, for Search"; do sleep 30; done;
        echo "All done!";
      '
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/es01/es01.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - mynetwork

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es02,es03
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.monitoring.collection.enabled=true
      - xpack.security.enabled=true
      - xpack.license.self_generated.type=${LICENSE}
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s http://localhost:9200 | grep -q 'You Know, for Search'"
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - mynetwork

  # es02 and es03 services are similar, omitting for brevity

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://es01:9200  # Change to use HTTP instead of HTTPS
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'"
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - mynetwork
  
  webscrapping01:
    build:
      context: .
      dockerfile: dockerfile01
    volumes:
      - ./output:/app/output
    environment:
      - DOCKER_ENV=True
    networks:
      - mynetwork

  webscrapping02:
    build:
      context: .
      dockerfile: dockerfile02
    volumes:
      - ./output:/app/output
    environment:
      - DOCKER_ENV=True
    networks:
      - mynetwork

  transformation:
    build:
      context: .
      dockerfile: dockerfile03
    depends_on:
      - webscrapping01
      - webscrapping02
    volumes:
      - ./output:/app/output
    environment:
      - DOCKER_ENV=True
    networks:
      - mynetwork

  import_to_elasticsearch:
    build:
      context: .
      dockerfile: dockerfile04
    depends_on:
      - transformation

    volumes:
      - .:/app
    environment:
      - DOCKER_ENV=True
    networks:
      - mynetwork

  sentiment_anaysis:
    build:
      context: .
      dockerfile: dockerfile05
    depends_on:
      - import_to_elasticsearch
    volumes:
      - ./output:/app/output
    environment:
      - DOCKER_ENV=True
    networks:
      - mynetwork

  dashboard:
    build:
      context: .
      dockerfile: dockerfile06
    depends_on:
      - sentiment_anaysis
    ports:
      - "8050:8050"
    volumes:
      - ./output:/app/output
    environment:
      - DOCKER_ENV=True
    networks:
      - mynetwork

volumes:

  webscrapping01:   
  webscrapping02:   
  import_to_elasticsearch:
  transformation:
  sentiment_anaysis:
  dashboard:

networks:
  mynetwork:
