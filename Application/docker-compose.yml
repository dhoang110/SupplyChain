version: '4.22.1'
services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        echo "Waiting for Elasticsearch availability";
        until curl -s https://es01:9200 | grep -q "cluster_name"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${ELASTIC_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: [ "CMD-SHELL", "curl -s https://es01:9200 | grep -q 'cluster_name'" ]
      interval: 10s
      retries: 120
    networks:
      - mynetwork

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=docker-cluster
      - cluster.initial_master_nodes=es01
      - ELASTIC_PASSWORD=datascientest
      - bootstrap.memory_lock=true
      - xpack.monitoring.collection.enabled=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - xpack.license.self_generated.type=${LICENSE}
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s https://es01:9200 | grep -q 'cluster_name'"
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - mynetwork
  
  webscrapping01:
    build:
      context: .
      dockerfile: dockerfile01
    volumes:
      - ./output:/app/output
    environment:
      - DOCKER_ENV=True
    networks:
      - mynetwork

  webscrapping02:
    build:
      context: .
      dockerfile: dockerfile02
    volumes:
      - ./output:/app/output
    environment:
      - DOCKER_ENV=True
    networks:
      - mynetwork

  transformation:
    build:
      context: .
      dockerfile: dockerfile03
    depends_on:
      - webscrapping01
      - webscrapping02
    volumes:
      - ./output:/app/output
    environment:
      - DOCKER_ENV=True
    networks:
      - mynetwork

  import_to_elasticsearch:
    build:
      context: .
      dockerfile: dockerfile04
    depends_on:
      - transformation
      - es01
    environment:
      - node.name=es01
      - cluster.name=docker-cluster
      - cluster.initial_master_nodes=es01
      - ELASTIC_PASSWORD=datascientest
      - bootstrap.memory_lock=true
      - xpack.monitoring.collection.enabled=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - xpack.license.self_generated.type=${LICENSE}
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - DOCKER_ENV=True
    volumes:
      - .:/app
      - ./output:/app/output
    networks:
      - mynetwork

  sentiment_anaysis:
    build:
      context: .
      dockerfile: dockerfile05
    depends_on:
      - setup
    environment:
      - node.name=es01
      - cluster.name=docker-cluster
      - cluster.initial_master_nodes=es01
      - ELASTIC_PASSWORD=datascientest
      - bootstrap.memory_lock=true
      - xpack.monitoring.collection.enabled=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - xpack.license.self_generated.type=${LICENSE}
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - DOCKER_ENV=True
    volumes:
      - ./output:/app/output
    networks:
      - mynetwork

  dashboard:
    build:
      context: .
      dockerfile: dockerfile06
    depends_on:
      - sentiment_anaysis
    ports:
      - "8050:8050"
    volumes:
      - ./output:/app/output
    environment:
      - DOCKER_ENV=True
    networks:
      - mynetwork

volumes:

  webscrapping01:   
  webscrapping02:   
  import_to_elasticsearch:
  transformation:
  sentiment_anaysis:
  dashboard:

networks:
  mynetwork:
    driver: bridge
